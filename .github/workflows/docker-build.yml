name: Docker Build and Test

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Weekly build to catch base image updates
    - cron: '0 6 * * 1'

env:
  IMAGE_NAME: openvpn
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker build -t test-image .
        docker run --rm test-image openvpn --version || true
        docker run --rm test-image openssl version
        # Run basic smoke tests
        docker run --rm test-image /bin/bash -c "which easyrsa && which openvpn && which iptables"

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build image for scanning
      run: docker build -t scan-image .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'scan-image'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build test image
      run: docker build -t test-openvpn .

    - name: Run integration tests
      run: |
        # Enable Docker experimental features for testing
        export DOCKER_CLI_EXPERIMENTAL=enabled
        
        # Run the existing test suite
        if [ -f test/run.sh ]; then
          ./test/run.sh test-openvpn
        fi

    - name: Test container health
      run: |
        # Test that the container starts properly
        docker run -d --name test-container \
          --cap-add=NET_ADMIN \
          -e DEBUG=1 \
          test-openvpn || true
        
        # Give it time to start
        sleep 10
        
        # Check if container is running
        docker ps | grep test-container || echo "Container not running - expected for incomplete config"
        
        # Check logs for errors
        docker logs test-container
        
        # Cleanup
        docker rm -f test-container || true